- name: Clone chirpstack docker compose
  git:
    repo: https://github.com/lhc/chirpstack-docker
    dest: /home/{{ansible_user}}/chirpstack
    clone: yes
    update: yes
    force: yes
    version: master

- name: Garantir que python3-venv e pip estejam instalados
  apt:
    name:
      - python3-venv
      - python3-pip
    state: present

- name: Copy Chirpstack gateway Bridge config
  copy:
    src: files/chirpstack-gateway-bridge.toml
    dest: /home/{{ansible_user}}/chirpstack/configuration/chirpstack-gateway-bridge/

- name: Create .env file
  copy:
    content: |
      SERVER_BROKER_HOST={{broker.host}}
      SERVER_BROKER_USER={{broker.user}}
      SERVER_BROKER_PASS={{broker.password}}
      RABBITMQ_ADMIN_USER={{broker.admin_user}}
      RABBITMQ_ADMIN_PASSWORD={{broker.admin_password}}
    dest: "/home/{{ansible_user}}/chirpstack/.env"
    mode: '0644'

- name: Tear Downs Docker Compose stack
  community.docker.docker_compose:
    project_src: "/home/{{ansible_user}}/chirpstack"
    files: docker-compose.yml
    state: absent        

- name: Run docker-compose
  community.docker.docker_compose:
    project_src: "/home/{{ansible_user}}/chirpstack"
    files: docker-compose.yml
    state: present
    pull: true

- name: Wait for RabbitMQ to be ready
  wait_for:
    host: "{{inventory_hostname}}"
    port: 15672
    timeout: 60

- name: Create MQTT user
  uri:
    url: "http://{{inventory_hostname}}:15672/api/users/{{broker.user}}"
    method: PUT
    user: "{{broker.admin_user}}"
    password: "{{broker.admin_password}}"
    body_format: json
    body: |
      {
        "password": "{{broker.password}}",
        "tags": "mqtt"
      }
    status_code: [201, 204]
    force_basic_auth: yes

- name: Create chirpstack vhost
  uri:
    url: "http://{{inventory_hostname}}:15672/api/vhosts/%2Fchirpstack"
    method: PUT
    user: "{{broker.admin_user}}"
    password: "{{broker.admin_password}}"
    status_code: [201, 204]
    force_basic_auth: yes

- name: Set permissions for MQTT user
  uri:
    url: "http://{{inventory_hostname}}:15672/api/permissions/%2F/chirpstack"
    method: PUT
    user: "{{broker.admin_user}}"
    password: "{{broker.admin_password}}"
    force_basic_auth: yes
    body_format: json
    body: |
      {
        "configure": ".*",
        "write": ".*",
        "read": ".*"
      }
    status_code: [200, 201, 204]
  register: set_permissions
  until: set_permissions.status in [200, 201, 204]
  retries: 5
  delay: 5

- name: Set permissions for chirpstack user on chirpstack vhost
  uri:
    url: "http://{{inventory_hostname}}:15672/api/permissions/%2Fchirpstack/{{broker.user}}"
    method: PUT
    user: "{{broker.admin_user}}"
    password: "{{broker.admin_password}}"
    force_basic_auth: yes
    body_format: json
    body: |
      {
        "configure": ".*",
        "write": ".*",
        "read": ".*"
      }
    status_code: [200, 201, 204]
  register: set_chirpstack_permissions
  until: set_chirpstack_permissions.status in [200, 201, 204]
  retries: 5
  delay: 5

# --- Início das Novas Configurações de Serviços ---

- name: Create directory for Node-RED data
  ansible.builtin.file:
    path: "/home/{{ansible_user}}/node-red/data"
    state: directory
    mode: '0755'
    owner: "{{ansible_user}}"
    group: "{{ansible_user}}"

- name: Create docker-compose file for Node-RED
  ansible.builtin.copy:
    dest: "/home/{{ansible_user}}/node-red/docker-compose.yml"
    content: |
      version: '3.8'
      services:
        node-red:
          image: nodered/node-red:latest
          container_name: node-red
          ports:
            - "1880:1880" # Porta para acessar o Node-RED (http://<seu_ip>:1880)
          volumes:
            - ./data:/data # Volume persistente para os flows do Node-RED
          restart: unless-stopped # Reinicia o container a menos que seja parado manualmente
    mode: '0644' # Permissões do arquivo

- name: Run Node-RED docker-compose stack
  community.docker.docker_compose:
    project_src: "/home/{{ansible_user}}/node-red" # Diretório do projeto Node-RED
    files: docker-compose.yml # Nome do arquivo docker-compose
    state: present # Garante que o serviço esteja rodando
    pull: true # Garante que a imagem mais recente do Node-RED seja baixada

- name: Create directory for Monitoring (Grafana, RabbitMQ Exporter) data
  ansible.builtin.file:
    path: "/home/{{ansible_user}}/monitoring/grafana_data"
    state: directory
    mode: '0755'
    owner: "{{ansible_user}}"
    group: "{{ansible_user}}"

- name: Create docker-compose file for Monitoring services
  ansible.builtin.copy:
    dest: "/home/{{ansible_user}}/monitoring/docker-compose.yml"
    content: |
      version: '3.8'
      services:
        grafana:
          image: grafana/grafana:latest
          container_name: grafana
          ports:
            - "3000:3000"
          volumes:
            - ./grafana_data:/var/lib/grafana
          restart: unless-stopped
          user: "1000"
          environment:
            GF_SECURITY_ADMIN_USER: admin
            GF_SECURITY_ADMIN_PASSWORD: sua_senha_segura

        rabbitmq_exporter:
          image: kbudde/rabbitmq-exporter
          container_name: rabbitmq-exporter
          ports:
            - "9090:9090"
          environment:
            RABBIT_URL: "http://{{inventory_hostname}}:15672"
            RABBIT_USER: "{{broker.admin_user}}"
            RABBIT_PASSWORD: "{{broker.admin_password}}"
          restart: unless-stopped
    mode: '0644'

- name: Run Monitoring services docker-compose stack
  community.docker.docker_compose:
    project_src: "/home/{{ansible_user}}/monitoring" # Diretório dos serviços de monitoramento
    files: docker-compose.yml # Nome do arquivo docker-compose
    state: present # Garante que os serviços estejam rodando
    pull: true # Garante que as imagens mais recentes sejam baixadas

# --- Fim das Novas Configurações de Serviços ---
